#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
C√°c h√†m ti·ªán √≠ch cho ETL process
"""
import pandas as pd
import logging
import json
import os
import sys
import duckdb
import time
from datetime import datetime
from typing import Dict, List, Optional, Any

# Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n v√† logging
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(os.path.dirname(CURRENT_DIR))
sys.path.insert(0, PROJECT_ROOT)

# ƒê·∫£m b·∫£o th∆∞ m·ª•c logs t·ªìn t·∫°i
LOGS_DIR = os.path.join(PROJECT_ROOT, "logs")
os.makedirs(LOGS_DIR, exist_ok=True)

# Thi·∫øt l·∫≠p logging
logger = logging.getLogger(__name__)

from src.utils.config import DUCKDB_PATH, DWH_STAGING_SCHEMA
from src.common.decorators import retry

@retry(max_tries=3, delay_seconds=1, backoff_factor=2, exceptions=(duckdb.Error,))
def get_duckdb_connection(duckdb_path: str = DUCKDB_PATH) -> duckdb.DuckDBPyConnection:
    """ 
    K·∫øt n·ªëi ƒë·∫øn DuckDB 
    
    Args:
        duckdb_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file DuckDB
        
    Returns:
        K·∫øt n·ªëi DuckDB
    """
    # ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n l√† tuy·ªát ƒë·ªëi
    if not os.path.isabs(duckdb_path):
        duckdb_path = os.path.join(PROJECT_ROOT, duckdb_path)
    
    # ƒê·∫£m b·∫£o th∆∞ m·ª•c cha t·ªìn t·∫°i
    parent_dir = os.path.dirname(duckdb_path)
    os.makedirs(parent_dir, exist_ok=True)
    
    logger.info(f"K·∫øt n·ªëi DuckDB t·∫°i: {duckdb_path}")
    
    return duckdb.connect(duckdb_path)

@retry(max_tries=2, delay_seconds=1, backoff_factor=2, exceptions=(Exception,))
def execute_sql_file_duckdb(sql_file_path: str, conn=None) -> bool:
    """
    Th·ª±c thi file SQL tr√™n DuckDB
    
    Args:
        sql_file_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file SQL
        conn: K·∫øt n·ªëi DuckDB (t√πy ch·ªçn)
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        with open(sql_file_path, 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        # N·∫øu kh√¥ng truy·ªÅn conn th√¨ t·ª± t·∫°o v√† t·ª± ƒë√≥ng
        close_conn = False
        if conn is None:
            conn = get_duckdb_connection()
            close_conn = True
        
        conn.execute(sql_script)
        
        if close_conn:
            conn.close()
            
        logger.info(f"ƒê√£ th·ª±c thi file SQL: {sql_file_path}")
        return True
    except Exception as e:
        logger.error(f"L·ªói khi th·ª±c thi file SQL {sql_file_path}: {str(e)}")
        raise

def setup_duckdb_schema() -> bool:
    """
    Thi·∫øt l·∫≠p schema v√† b·∫£ng cho DuckDB
    
    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c SQL
        SQL_DIR = os.path.join(PROJECT_ROOT, "sql")
        if not os.path.exists(SQL_DIR):
            SQL_DIR = os.path.join(os.getcwd(), "sql")
            os.makedirs(SQL_DIR, exist_ok=True)
            
        with get_duckdb_connection() as conn:
            # T·∫°o schema n·∫øu ch∆∞a c√≥
            conn.execute(f"CREATE SCHEMA IF NOT EXISTS {DWH_STAGING_SCHEMA};")
            logger.info(f"ƒê√£ ƒë·∫£m b·∫£o t·ªìn t·∫°i schema: {DWH_STAGING_SCHEMA}")

            # Th·ª±c thi file schema_dwh.sql ƒë·ªÉ t·∫°o b·∫£ng v√† ch·ªâ m·ª•c
            schema_dwh = os.path.join(SQL_DIR, "schema_dwh.sql")
            if os.path.exists(schema_dwh):
                if not execute_sql_file_duckdb(schema_dwh, conn=conn):
                    logger.error("Kh√¥ng th·ªÉ thi·∫øt l·∫≠p schema v√† b·∫£ng!")
                    return False
            else:
                logger.error(f"Kh√¥ng t√¨m th·∫•y file schema: {schema_dwh}")
                return False

            # Ki·ªÉm tra xem c√°c b·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng ch∆∞a
            tables_in_db = [row[0] for row in conn.execute("SHOW TABLES").fetchall()]
            for table in ['DimJob', 'DimCompany', 'DimLocation', 'DimDate', 'FactJobPostingDaily', 'FactJobLocationBridge']:
                if table in tables_in_db:
                    logger.info(f"‚úì B·∫£ng {table} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
                else:
                    logger.warning(f"‚úó B·∫£ng {table} KH√îNG ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
            
            # ƒê·∫∑t l·∫°i gi√° tr·ªã c·ªßa c√°c sequence d·ª±a tr√™n d·ªØ li·ªáu hi·ªán c√≥
            logger.info("üîÑ ƒê·∫∑t l·∫°i gi√° tr·ªã c·ªßa c√°c sequence d·ª±a tr√™n d·ªØ li·ªáu hi·ªán c√≥...")
            sequence_results = reset_sequences(conn)
            
            # Ki·ªÉm tra k·∫øt qu·∫£ reset sequence
            sequence_failures = []
            for sequence, value in sequence_results.items():
                if isinstance(value, int) and value > 0:
                    logger.info(f"‚úì Sequence {sequence} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh {value}")
                else:
                    logger.warning(f"‚ö†Ô∏è Sequence {sequence}: {value}")
                    sequence_failures.append(sequence)
            
            # N·∫øu th·∫•t b·∫°i v·ªõi sequence fact_id, th·ª≠ reset fact tables
            if 'seq_fact_id' in sequence_failures:
                logger.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i sequence fact_id. Th·ª≠ reset fact tables...")
                
                # Ki·ªÉm tra s·ªë b·∫£n ghi ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ n√™n reset hay kh√¥ng
                fact_count = conn.execute("SELECT COUNT(*) FROM FactJobPostingDaily").fetchone()[0]
                
                if fact_count > 0:
                    # Ch·ªâ reset n·∫øu c√≥ b·∫£n ghi (tr√°nh reset kh√¥ng c·∫ßn thi·∫øt)
                    if reset_fact_tables(conn):
                        logger.info("‚úÖ ƒê√£ reset fact tables th√†nh c√¥ng")
                    else:
                        logger.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ reset fact tables")
                else:
                    logger.info("‚ÑπÔ∏è B·∫£ng fact tr·ªëng, kh√¥ng c·∫ßn reset")

        logger.info("ƒê√£ thi·∫øt l·∫≠p schema v√† b·∫£ng database th√†nh c√¥ng cho DuckDB!")
        return True
    except Exception as e:
        logger.error(f"L·ªói khi thi·∫øt l·∫≠p schema database v·ªõi DuckDB: {str(e)}")
        return False

def batch_insert_records(
    duck_conn: duckdb.DuckDBPyConnection, 
    table_name: str, 
    records: List[Dict], 
    batch_size: int = 1000,
    on_conflict: str = None
) -> int:
    """
    Batch insert records ƒë·ªÉ t·ªëi ∆∞u performance
    
    Args:
        duck_conn: K·∫øt n·ªëi DuckDB
        table_name: T√™n b·∫£ng
        records: List c√°c records c·∫ßn insert
        batch_size: K√≠ch th∆∞·ªõc batch
        on_conflict: X·ª≠ l√Ω conflict (e.g., "ON CONFLICT (column) DO NOTHING")
        
    Returns:
        int: S·ªë b·∫£n ghi ƒë√£ insert th√†nh c√¥ng
    """
    if not records:
        return 0
        
    inserted_count = 0
    error_count = 0
    max_errors = 5  # S·ªë l·ªói t·ªëi ƒëa cho ph√©p tr∆∞·ªõc khi d·ª´ng
    
    # Chia records th√†nh c√°c batch
    for i in range(0, len(records), batch_size):
        batch = records[i:i + batch_size]
        current_batch_size = len(batch)
        
        try:
            # Chu·∫©n b·ªã d·ªØ li·ªáu batch
            df_batch = pd.DataFrame(batch)
            
            # X·ª≠ l√Ω c√°c c·ªôt JSON
            for col in df_batch.columns:
                df_batch[col] = df_batch[col].apply(
                    lambda x: json.dumps(x) if isinstance(x, (dict, list)) else x
                )
            
            # X√¢y d·ª±ng c√¢u l·ªánh INSERT
            if on_conflict:
                duck_conn.execute(f"INSERT INTO {table_name} SELECT * FROM df_batch {on_conflict}")
            else:
                duck_conn.execute(f"INSERT INTO {table_name} SELECT * FROM df_batch")
                
            inserted_count += current_batch_size
            
        except Exception as e:
            logger.warning(f"L·ªói khi batch insert v√†o {table_name}: {e}")
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói unique constraint kh√¥ng
            is_unique_constraint = "unique constraint" in str(e).lower() or "duplicate key" in str(e).lower()
            
            # N·∫øu l√† l·ªói unique constraint v√† c√≥ on_conflict, th·ª≠ l·∫°i v·ªõi c√∫ ph√°p kh√°c
            if is_unique_constraint and on_conflict and "ON CONFLICT" in on_conflict.upper():
                try:
                    logger.info(f"Th·ª≠ l·∫°i v·ªõi c√∫ ph√°p DuckDB kh√°c...")
                    # DuckDB c√≥ th·ªÉ s·ª≠ d·ª•ng c√∫ ph√°p kh√°c nhau t√πy phi√™n b·∫£n
                    if "DO NOTHING" in on_conflict.upper():
                        # Th·ª≠ v·ªõi OR IGNORE
                        duck_conn.execute(f"INSERT OR IGNORE INTO {table_name} SELECT * FROM df_batch")
                        inserted_count += current_batch_size
                        continue
                except Exception as e2:
                    logger.warning(f"Th·ª≠ l·∫°i batch insert kh√¥ng th√†nh c√¥ng: {e2}")
            
            # Fallback: insert t·ª´ng record
            fallback_inserted = 0
            for record in batch:
                if error_count >= max_errors:
                    logger.error(f"ƒê√£ ƒë·∫°t gi·ªõi h·∫°n l·ªói ({max_errors}), d·ª´ng insert")
                    break
                
                try:
                    columns = list(record.keys())
                    placeholders = ', '.join(['?'] * len(columns))
                    values = [record[col] for col in columns]
                    
                    # X·ª≠ l√Ω gi√° tr·ªã JSON
                    for j, val in enumerate(values):
                        if isinstance(val, (dict, list)):
                            values[j] = json.dumps(val)
                    
                    # X√¢y d·ª±ng c√¢u l·ªánh INSERT
                    query = f"""
                        INSERT INTO {table_name} ({', '.join(columns)})
                        VALUES ({placeholders})
                    """
                    
                    if on_conflict:
                        query += f" {on_conflict}"
                        
                    duck_conn.execute(query, values)
                    fallback_inserted += 1
                except Exception as e2:
                    error_count += 1
                    if error_count < max_errors:
                        logger.error(f"L·ªói khi insert single record v√†o {table_name}: {e2}")
                    elif error_count == max_errors:
                        logger.error(f"ƒê√£ ƒë·∫°t gi·ªõi h·∫°n l·ªói ({max_errors}), s·∫Ω kh√¥ng log th√™m l·ªói insert")
            
            inserted_count += fallback_inserted
            
            if fallback_inserted > 0:
                logger.info(f"ƒê√£ fallback insert {fallback_inserted}/{current_batch_size} records v√†o {table_name}")
            
            # N·∫øu ƒë√£ ƒë·∫°t gi·ªõi h·∫°n l·ªói, d·ª´ng x·ª≠ l√Ω
            if error_count >= max_errors:
                logger.error(f"ƒê√£ ƒë·∫°t gi·ªõi h·∫°n l·ªói ({max_errors}), d·ª´ng batch insert")
                break
    
    # Thay ƒë·ªïi m·ª©c ƒë·ªô log t·ª´ INFO xu·ªëng DEBUG
    if inserted_count > 0:
        if inserted_count > 10:
            logger.info(f"ƒê√£ batch insert {inserted_count} records v√†o {table_name}")
        else:
            logger.debug(f"ƒê√£ batch insert {inserted_count} records v√†o {table_name}")
    
    return inserted_count

@retry(max_tries=3, delay_seconds=1, backoff_factor=2, exceptions=(Exception,))
def lookup_dimension_key(
    duck_conn: duckdb.DuckDBPyConnection,
    dim_table: str,
    key_column: str,
    key_value: Any,
    surrogate_key_col: str
) -> Optional[int]:
    """
    T√¨m surrogate key t·ª´ b·∫£ng dimension
    
    Args:
        duck_conn: K·∫øt n·ªëi DuckDB
        dim_table: T√™n b·∫£ng dimension
        key_column: T√™n c·ªôt d√πng ƒë·ªÉ t√¨m ki·∫øm
        key_value: Gi√° tr·ªã c·∫ßn t√¨m
        surrogate_key_col: T√™n c·ªôt surrogate key
    
    Returns:
        Surrogate key ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
    """
    try:
        query = f"""
            SELECT {surrogate_key_col}
            FROM {dim_table}
            WHERE {key_column} = ?
            AND is_current = TRUE
            LIMIT 1
        """
        
        result = duck_conn.execute(query, [key_value]).fetchone()
        if result:
            return result[0]
        return None
    except Exception as e:
        logger.error(f"L·ªói khi t√¨m kh√≥a trong {dim_table}: {e}")
        raise

@retry(max_tries=3, delay_seconds=1, backoff_factor=2, exceptions=(Exception,))
def lookup_location_key(
    duck_conn: duckdb.DuckDBPyConnection,
    province: str = None,
    city: str = None,
    district: str = None
) -> Optional[int]:
    """
    T√¨m location_sk t·ª´ b·∫£ng DimLocation d·ª±a tr√™n province, city, district
    
    Args:
        duck_conn: K·∫øt n·ªëi DuckDB
        province: T√™n t·ªânh
        city: T√™n th√†nh ph·ªë
        district: T√™n qu·∫≠n/huy·ªán
    
    Returns:
        location_sk ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
    """
    try:
        # X√¢y d·ª±ng query ƒë·ªông d·ª±a tr√™n c√°c tham s·ªë c√≥ gi√° tr·ªã
        conditions = ["is_current = TRUE"]
        params = []
        
        if province is not None:
            conditions.append("province = ?")
            params.append(province)
        else:
            conditions.append("province IS NULL")
            
        if city is not None:
            conditions.append("city = ?")
            params.append(city)
        else:
            conditions.append("city IS NULL")
            
        if district is not None:
            conditions.append("district = ?")
            params.append(district)
        else:
            conditions.append("district IS NULL")
        
        query = f"""
            SELECT location_sk
            FROM DimLocation
            WHERE {' AND '.join(conditions)}
            LIMIT 1
        """
        
        result = duck_conn.execute(query, params).fetchone()
        if result:
            return result[0]
        return None
    except Exception as e:
        logger.error(f"L·ªói khi t√¨m location_sk: {e}")
        raise

def reset_sequences(duck_conn: duckdb.DuckDBPyConnection) -> Dict[str, int]:
    """
    ƒê·∫∑t l·∫°i c√°c sequence ID d·ª±a tr√™n gi√° tr·ªã l·ªõn nh·∫•t hi·ªán c√≥ trong b·∫£ng
    
    Args:
        duck_conn: K·∫øt n·ªëi DuckDB
        
    Returns:
        Dict ch·ª©a t√™n sequence v√† gi√° tr·ªã m·ªõi
    """
    results = {}
    
    try:
        # Danh s√°ch c√°c b·∫£ng v√† c√°c sequence t∆∞∆°ng ·ª©ng
        tables_and_sequences = [
            ('DimJob', 'seq_dim_job_sk', 'job_sk'),
            ('DimCompany', 'seq_dim_company_sk', 'company_sk'),
            ('DimLocation', 'seq_dim_location_sk', 'location_sk'),
            ('FactJobPostingDaily', 'seq_fact_id', 'fact_id')
        ]
        
        for table, sequence, id_column in tables_and_sequences:
            # Ki·ªÉm tra xem b·∫£ng c√≥ d·ªØ li·ªáu kh√¥ng
            count_query = f"SELECT COUNT(*) FROM {table}"
            count = duck_conn.execute(count_query).fetchone()[0]
            
            if count > 0:
                # L·∫•y gi√° tr·ªã l·ªõn nh·∫•t c·ªßa id_column
                max_query = f"SELECT MAX({id_column}) FROM {table}"
                max_id = duck_conn.execute(max_query).fetchone()[0]
                
                if max_id is not None:
                    # ƒê·∫∑t l·∫°i gi√° tr·ªã sequence b·∫Øt ƒë·∫ßu t·ª´ max_id + 1
                    new_start = max_id + 1
                    try:
                        # C·ªë g·∫Øng s·ª≠ d·ª•ng ALTER SEQUENCE ƒë·ªÉ ƒë·∫∑t l·∫°i gi√° tr·ªã
                        try:
                            # Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng ALTER SEQUENCE ... RESTART WITH
                            alter_query = f"ALTER SEQUENCE {sequence} RESTART WITH {new_start}"
                            duck_conn.execute(alter_query)
                            logger.info(f"ƒê√£ ƒë·∫∑t l·∫°i sequence {sequence} b·∫Øt ƒë·∫ßu t·ª´ {new_start} (ph∆∞∆°ng ph√°p ALTER)")
                            results[sequence] = new_start
                        except Exception as e1:
                            logger.warning(f"Kh√¥ng th·ªÉ s·ª≠ d·ª•ng ALTER SEQUENCE: {e1}")
                            
                            try:
                                # Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng setval() n·∫øu c√≥
                                setval_query = f"SELECT setval('{sequence}', {new_start})"
                                duck_conn.execute(setval_query)
                                logger.info(f"ƒê√£ ƒë·∫∑t l·∫°i sequence {sequence} b·∫Øt ƒë·∫ßu t·ª´ {new_start} (ph∆∞∆°ng ph√°p setval)")
                                results[sequence] = new_start
                            except Exception as e2:
                                logger.warning(f"Kh√¥ng th·ªÉ s·ª≠ d·ª•ng setval: {e2}")
                                
                                # Ph∆∞∆°ng ph√°p 3: S·ª≠ d·ª•ng nextval() ƒë·ªÉ ti√™u th·ª• gi√° tr·ªã cho ƒë·∫øn khi ƒë·∫°t ƒë·∫øn gi√° tr·ªã mong mu·ªën
                                try:
                                    # L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa sequence
                                    current_val_query = f"SELECT nextval('{sequence}')"
                                    current_val = duck_conn.execute(current_val_query).fetchone()[0]
                                    
                                    # Ti√™u th·ª• gi√° tr·ªã cho ƒë·∫øn khi ƒë·∫°t ƒë·∫øn gi√° tr·ªã mong mu·ªën
                                    if current_val < new_start:
                                        duck_conn.execute(f"""
                                            DO $$
                                            DECLARE
                                                current_val BIGINT;
                                            BEGIN
                                                SELECT nextval('{sequence}') INTO current_val;
                                                WHILE current_val < {new_start} LOOP
                                                    SELECT nextval('{sequence}') INTO current_val;
                                                END LOOP;
                                            END
                                            $$;
                                        """)
                                        logger.info(f"ƒê√£ ƒë·∫∑t l·∫°i sequence {sequence} b·∫Øt ƒë·∫ßu t·ª´ {new_start} (ph∆∞∆°ng ph√°p nextval)")
                                        results[sequence] = new_start
                                    else:
                                        logger.warning(f"Sequence {sequence} ƒë√£ c√≥ gi√° tr·ªã ({current_val}) l·ªõn h∆°n gi√° tr·ªã mong mu·ªën ({new_start})")
                                        results[sequence] = current_val
                                except Exception as e3:
                                    logger.warning(f"Kh√¥ng th·ªÉ s·ª≠ d·ª•ng nextval: {e3}")
                                    results[sequence] = -1
                    except Exception as e:
                        logger.warning(f"Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i sequence {sequence}: {e}")
                        results[sequence] = -1
            else:
                # N·∫øu b·∫£ng kh√¥ng c√≥ d·ªØ li·ªáu, ƒë·∫∑t l·∫°i sequence v·ªÅ 1
                try:
                    try:
                        alter_query = f"ALTER SEQUENCE {sequence} RESTART WITH 1"
                        duck_conn.execute(alter_query)
                    except:
                        try:
                            setval_query = f"SELECT setval('{sequence}', 1)"
                            duck_conn.execute(setval_query)
                        except:
                            logger.warning(f"Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i sequence {sequence} v·ªÅ 1")
                            
                    logger.info(f"B·∫£ng {table} kh√¥ng c√≥ d·ªØ li·ªáu, ƒë·∫∑t sequence {sequence} b·∫Øt ƒë·∫ßu t·ª´ 1")
                    results[sequence] = 1
                except Exception as e:
                    logger.warning(f"Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i sequence {sequence}: {e}")
                    results[sequence] = -1
        
        return results
    
    except Exception as e:
        logger.error(f"L·ªói khi ƒë·∫∑t l·∫°i c√°c sequence: {e}")
        return {"error": str(e)}

def reset_fact_tables(duck_conn: duckdb.DuckDBPyConnection) -> bool:
    """
    Reset c√°c b·∫£ng fact khi c·∫ßn thi·∫øt.
    Ph∆∞∆°ng √°n cu·ªëi c√πng ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ sequence tr√πng l·∫∑p.
    
    Args:
        duck_conn: K·∫øt n·ªëi DuckDB
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        logger.warning("‚ö†Ô∏è RESET FACT TABLES: B·∫Øt ƒë·∫ßu x√≥a v√† t·∫°o l·∫°i c√°c b·∫£ng fact...")
        
        # B·∫Øt ƒë·∫ßu transaction
        duck_conn.execute("BEGIN TRANSACTION")
        
        try:
            # 1. Backup d·ªØ li·ªáu hi·ªán c√≥ (n·∫øu c·∫ßn)
            logger.info("T·∫°o b·∫£ng backup...")
            duck_conn.execute("CREATE TEMP TABLE IF NOT EXISTS fact_backup AS SELECT * FROM FactJobPostingDaily")
            duck_conn.execute("CREATE TEMP TABLE IF NOT EXISTS bridge_backup AS SELECT * FROM FactJobLocationBridge")
            
            # 2. ƒê·∫øm s·ªë b·∫£n ghi tr∆∞·ªõc khi x√≥a
            count_fact = duck_conn.execute("SELECT COUNT(*) FROM FactJobPostingDaily").fetchone()[0]
            count_bridge = duck_conn.execute("SELECT COUNT(*) FROM FactJobLocationBridge").fetchone()[0]
            logger.info(f"S·ªë b·∫£n ghi tr∆∞·ªõc khi reset: {count_fact} fact records, {count_bridge} bridge records")
            
            # 3. X√≥a t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ bridge table tr∆∞·ªõc (do ph·ª• thu·ªôc kh√≥a ngo·∫°i)
            duck_conn.execute("DELETE FROM FactJobLocationBridge")
            
            # 4. X√≥a t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ fact table
            duck_conn.execute("DELETE FROM FactJobPostingDaily")
            
            # 5. Reset sequence v·ªÅ gi√° tr·ªã l·ªõn (an to√†n)
            try:
                duck_conn.execute("DROP SEQUENCE IF EXISTS seq_fact_id")
                duck_conn.execute("CREATE SEQUENCE seq_fact_id START 10000")
                logger.info("ƒê√£ t·∫°o l·∫°i sequence seq_fact_id b·∫Øt ƒë·∫ßu t·ª´ 10000")
            except Exception as e:
                logger.warning(f"Kh√¥ng th·ªÉ reset sequence seq_fact_id: {e}")
                
                try:
                    # Th·ª≠ v·ªõi ph∆∞∆°ng ph√°p kh√°c n·∫øu c√≥
                    duck_conn.execute("ALTER SEQUENCE seq_fact_id RESTART WITH 10000")
                    logger.info("ƒê√£ ƒë·∫∑t l·∫°i sequence seq_fact_id b·∫Øt ƒë·∫ßu t·ª´ 10000 (ph∆∞∆°ng ph√°p ALTER)")
                except Exception as e2:
                    logger.warning(f"Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i sequence seq_fact_id: {e2}")
            
            # 6. T·∫°o l·∫°i b·∫£ng fact v√† bridge t·ª´ c√°c file SQL n·∫øu c·∫ßn
            
            # 7. Commit transaction
            duck_conn.execute("COMMIT")
            
            # Ki·ªÉm tra k·∫øt qu·∫£
            count_fact_after = duck_conn.execute("SELECT COUNT(*) FROM FactJobPostingDaily").fetchone()[0]
            count_bridge_after = duck_conn.execute("SELECT COUNT(*) FROM FactJobLocationBridge").fetchone()[0]
            
            if count_fact_after == 0 and count_bridge_after == 0:
                logger.info("‚úÖ ƒê√£ reset th√†nh c√¥ng c√°c b·∫£ng fact")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Reset kh√¥ng ho√†n to√†n: c√≤n l·∫°i {count_fact_after} fact records, {count_bridge_after} bridge records")
                return False
            
        except Exception as e:
            duck_conn.execute("ROLLBACK")
            logger.error(f"L·ªói khi reset fact tables: {e}")
            return False
            
    except Exception as e:
        logger.error(f"L·ªói critical khi reset fact tables: {e}")
        return False 